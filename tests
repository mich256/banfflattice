n=10
posets = [(p.with_bounds()).relabel() for p in Posets(n-2)]
modularlattices = [LatticePoset(p) for p in posets if p.is_lattice() and LatticePoset(p).is_modular() and not LatticePoset(p).is_distributive()]
for M in modularlattices:
	M = M.relabel().relabel(lambda n: n+1)
	ccv_coxeter(M)

n = 11
posets = [(p.with_bounds()).relabel() for p in Posets(n-2)]
modularlattices = [LatticePoset(p) for p in posets if p.is_lattice() and LatticePoset(p).is_modular()]
for M in modularlattices:
	w = Permutation(CoxeterPerm(M.lequal_matrix().transpose()))
	if all([i < 3 for i in w.cycle_type()]):
		plot(M)
		print(w)

n=10
posets = [(p.with_bounds()).relabel() for p in Posets(n-2)]
trimlattices = [LatticePoset(p) for p in posets if p.is_lattice() and LatticePoset(p).is_trim() and not LatticePoset(p).is_distributive()]
all([conj_Colin(L) for L in trimlattices])


n=7
posets = [(p.with_bounds()).relabel() for p in Posets(n-2)]
modularlattices = [LatticePoset(p) for p in posets if p.is_lattice() and LatticePoset(p).is_modular() and not LatticePoset(p).is_distributive()]
for M in modularlattices:
	M = M.relabel().relabel(lambda n: n+1)
	plot(M)
	print(CoxeterPerm(M.lequal_matrix().transpose()))

n=9
posets = [(p.with_bounds()).relabel() for p in Posets(n-2)]
lattices = [LatticePoset(p) for p in posets if p.is_lattice() and not LatticePoset(p).is_distributive()]
for M in lattices:
	M = M.relabel().relabel(lambda n: n+1)
	O=M.linear_extensions()
	OO=[M.linear_extension(x).to_poset() for x in O]
	all([mp_to_jp(x) for x in OO])

L=posets.TamariLattice(3).relabel().relabel(lambda n: n + 1)
W=L.lequal_matrix().transpose()
P=CoxeterPerm(W)
display(P)
plot(L)

Here how to get all Coxeter permutations of all linear extensions of a given poset:
L= posets.TamariLattice(3).relabel().relabel(lambda n: n + 1)                                                                                                                                                       L= posets.TamariLattice(3).relabel().relabel(lambda n: n + 1)
O=L.linear_extensions()
OO=[L.linear_extension(x).to_poset() for x in O]
OO2=[CoxeterPerm(x.lequal_matrix().transpose()) for x in OO]
display(OO2)
plot(L)

posets = [p for p in Posets(n-2)]
dissectiveposets = [p.with_bounds() for p in posets if LatticePoset(p.completion_by_cuts()).is_distributive() and not p.is_lattice()]